import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class SetADT<T> implements Iterable<T> {
    private Set<T> set;

    public SetADT() {
        set = new HashSet<>();
    }

    // a. Add a value into the set
    public void add(T element) {
        set.add(element);
    }

    // b. Remove the value
    public void remove(T element) {
        set.remove(element);
    }

    // c. Return true if element is in the set
    public boolean contains(T element) {
        return set.contains(element);
    }

    // d. Return number of values in the set
    public int size() {
        return set.size();
    }

    // e. Return iterator to loop over the collection
    public Iterator<T> iterator() {
        return set.iterator();
    }

    // f. Return intersection of two sets
    public SetADT<T> intersection(SetADT<T> otherSet) {
        SetADT<T> result = new SetADT<>();
        for (T element : this.set) {
            if (otherSet.contains(element)) {
                result.add(element);
            }
        }
        return result;
    }

    // g. Return difference between two sets (this - otherSet)
    public SetADT<T> difference(SetADT<T> otherSet) {
        SetADT<T> result = new SetADT<>();
        for (T element : this.set) {
            if (!otherSet.contains(element)) {
                result.add(element);
            }
        }
        return result;
    }

    // h. Check if this set is a subset of another
    public boolean isSubset(SetADT<T> otherSet) {
        for (T element : this.set) {
            if (!otherSet.contains(element)) {
                return false;
            }
        }
        return true;
    }

    // For-each loop support
    @Override
    public Iterator<T> iterator() {
        return set.iterator();
    }

    // Demo
    public static void main(String[] args) {
        SetADT<Integer> setA = new SetADT<>();
        setA.add(1);
        setA.add(2);
        setA.add(3);

        SetADT<Integer> setB = new SetADT<>();
        setB.add(2);
        setB.add(3);
        setB.add(4);

        System.out.println("Set A contains 2? " + setA.contains(2));
        System.out.println("Set A size: " + setA.size());

        System.out.print("Set A elements: ");
        for (int value : setA) {
            System.out.print(value + " ");
        }

        System.out.print("\nIntersection (A âˆ© B): ");
        SetADT<Integer> intersection = setA.intersection(setB);
        for (int value : intersection) {
            System.out.print(value + " ");
        }

        System.out.print("\nDifference (A - B): ");
        SetADT<Integer> difference = setA.difference(setB);
        for (int value : difference) {
            System.out.print(value + " ");
        }

        System.out.println("\nIs A a subset of B? " + setA.isSubset(setB));
        System.out.println("Is intersection a subset of A? " + intersection.isSubset(setA));
    }
}
